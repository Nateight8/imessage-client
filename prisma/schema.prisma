datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  username                String?                   @unique
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String                    @id @default(cuid()) @map("_id")
  participants    ConversationParticipant[]
  messages        Message[]                 @relation("conversationMessages")
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId String?                   @unique
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id                   String       @id @default(cuid()) @map("_id")
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  conversationId       String
  hasSeenLatestMessage Boolean
}

model Message {
  id             String        @id @default(cuid()) @map("_id")
  conversation   Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  conversationId String
  isLatestIn     Conversation? @relation("latestConversationMessage")
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model TestMessage {
  id        String @id @default(cuid()) @map("_id")
  createdBy String
  text      String
}

model Comment {
  id      String @id @default(cuid())
  comment String
}
